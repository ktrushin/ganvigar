#!/bin/sh

set -eu

abort() {
  echo "error: $1" >& 2
  exit 1
}

original_dir=$(pwd)
cd_to_original_dir() {
  cd $original_dir
}
trap cd_to_original_dir EXIT

prog=$(basename $0)
prog_dir=$(dirname $(realpath $0))

help_msg="\
Description:
  The program creates, starts and puts a user into a Docker container-based
  development environment which is set up accroding to the configuration file.

Usage:
  $prog [-h] <file>

Options:
  -h
    Print this help message and exit.

Arguments:
  <file> - the configuration file"

while getopts "h" opt; do
  case "$opt" in
    h) echo "$help_msg"; exit 0;;
  esac
done
shift "$((OPTIND-1))"

if [ "$#" -ne 1 ]; then abort "wrong number of arguments"; fi

config_path="$1"
config=$(cat "$config_path")

if ! sed --version > /dev/null; then abort "sed is not installed"; fi
if ! awk -W version > /dev/null 2>&1; then abort "awk is not installed"; fi
if ! jq --version > /dev/null; then abort "jq is not installed"; fi
if ! docker -v > /dev/null; then
  abort "docker runtime is not installed";
fi
docker_version=$(docker -v | sed 's/^Docker version \([1-9][0-9]*\)\..*/\1/')
if [ "$docker_version" -lt 19 ]; then
  abort "Docker version is $docker_version but version 19 or higher is required"
fi
export DOCKER_BUILDKIT=1

# Test that config is a valid JSON
echo "$config" | jq 'empty'
# Test that only one JSON document is in config
echo "$config" | jq -s '
  if length > 1 then
    error("more than one JSON document in the file")
  else
    empty
  end'


config_get_optional() {
  echo "$config" | jq -rM "
    $1 |
    if type == \"null\" then
      empty
    elif type == \"string\" then
      .
    else
      error(\"the value of the \`$1\` field is not a string\")
    end"
}

config_get() {
  echo "$config" | jq -rM "
    $1 |
    if type == \"null\" then
      error(\"the \`$1\` field is missing\")
    elif type == \"string\" then
      .
    else
      error(\"the value of the \`$1\` field is not a string\")
    end"
}

config_get_languages() {
  echo "$config" | jq -rM '
    .languages |
    if . == null then
      empty
    elif type == "array" then
      .
    else
      error("the `.languages` field is not an array")
    end |
    [
      .[] |
      if type != "string" then
        error("the element `" + . + "` of the `.languages` array " +
              "is not a string")
      else
        [. , ascii_downcase]
      end
    ] |
    [
      .[] |
      if .[1] == "c++" then
        "cpp"
      elif .[1] == "python" then
        "py"
      else
        error("unsupported element value of the `.languages` " +
              "array: `" + .[0] + "`; use any of: `C++`, `Python`")
      end
    ] |
    join(" ")' | tr ' ' '\n' | sort | tr '\n' ' '
}

container_get_checksum() {
  docker container inspect $1 | jq -rM '.[0].Config.Env | .[]' | \
    awk -F'=' '$1 == "GANVIGAR_CONTAINER_CHECKSUM" {print $2}'
}

# Checksum is the MD5 hasf of all the inputs truncated
# to the first eight characters
compute_checksum() {
  echo "$@" | md5sum | cut -c -8
}

base_image="ubuntu:22.04"
components="u22 $(config_get_languages)"
for c in $components; do
  image_name="${image_name:-"$(id -un)/$c"}${image_name:+"-$c"}"
  image_dockerfile="$prog_dir/docker/${c}.dockerfile"
  image_inputs="$base_image $(cat $image_dockerfile)"
  image_inputs="$image_inputs $(id -un) $(id -gn) $(id -u) $(id -g)"
  image_tag="$(compute_checksum "$image_inputs")"

  build_args="--build-arg base=$base_image"
  build_args="$build_args --build-arg username=$(id -un)"
  build_args="$build_args --build-arg groupname=$(id -gn)"
  build_args="$build_args --build-arg uid=$(id -u) "
  build_args="$build_args --build-arg gid=$(id -g)"
  if [ -z "$(docker image ls -q $image_name:$image_tag)" ]; then
    docker image build -f $image_dockerfile $build_args \
        -t $image_name:$image_tag $prog_dir
  fi
  base_image="$image_name:$image_tag"
done

image_name=$(config_get_optional '.image.name')
image_contextdir_str=$(config_get_optional '.image.contextdir')
if [ -z "$image_name" -a -n "$image_contextdir_str" ]; then
  abort "the \`.image.contextdir\` field is specified but \`.image.name\` isn't"
fi

if [ -n "$image_name" ]; then
  image_name=$(echo $image_name | sed s/__USER_NAME__/$(id -un)/g)

  image_dockerfile="$config_path.dockerfile"
  if [ ! -e "$image_dockerfile" ]; then
    abort "the \`$image_dockerfile\` file does not exist"
  fi

  if [ -z "$image_contextdir_str" ]; then image_contextdir_str=$(pwd); fi
  image_contextdir=$(echo $image_contextdir_str | sed "s|^~/\(.*\)|$HOME/\1|")
  if [ ! -d "$image_contextdir" ]; then
    abort "the \`$image_contextdir_str\` is not a directory";
  fi

  # skip empty lines and comments in the dockerfile and analyze the first
  # two lines
  first_two_lines=$(cat $image_dockerfile | awk '/^$/{next};/^#/{next};{printf("%s\n", $0)}' | \
                    head -n 2 )
  line1=$(echo "$first_two_lines" | head -n 1)
  line2=$(echo "$first_two_lines" | tail -n 1)
  if [ "$line1" != 'ARG base' -o "$line2" != 'FROM $base' ]; then
    msg="The \`$image_dockerfile\` file must start "
    msg="$msg (not counting comments and empty lines) with the following code:"
    msg="${msg}\n\`\`\`\nARG base\nFROM \$base\n\`\`\`"
    abort "$msg"
  fi

  if grep -q '^ADD ' $image_dockerfile; then
    msg="WARNING: The dockerfile \`$image_dockerfile\` uses the \`ADD\` command."
    msg="$msg Using \`ADD\` for simple file copying breaks checksum computing "
    msg="$msg in the \`$prog\`."
    msg="$msg Consider replacing it with the \`COPY\` command where possible."
    echo $msg
  fi

  image_inputs="$base_image $(cat $image_dockerfile)"
  image_dockerignore="${image_dockerfile}.dockerignore"
  if [ -e "$image_dockerignore" ]; then
    image_inputs="$image_inputs $(cat $image_dockerignore)"
  fi

  files=$(sed -f $prog_dir/join_lines.sed $image_dockerfile | \
          awk -f $prog_dir/copy_sources.awk)
  if [ -n "$files" ]; then
    dir=$(pwd)
    cd $image_contextdir
    image_inputs="$image_inputs $(find $files -type f -exec base64 {} \;)"
    cd $dir
  fi
  image_inputs="$image_inputs $(realpath $image_contextdir)"
  image_tag="$(compute_checksum "$image_inputs")"

  if [ -z "$(docker image ls -q $image_name:$image_tag)" ]; then
    docker image build -f $image_dockerfile \
        --build-arg base=$base_image -t $image_name:$image_tag $image_contextdir
  fi
  base_image="$image_name:$image_tag"
fi

container_name=$(config_get '.container.name')
container_name=$(echo $container_name | sed s/__USER_NAME__/$(id -un)/g)

container_workdir_str=$(config_get_optional '.container.workdir')
if [ -z "$container_workdir_str" ]; then container_workdir_str=$(pwd); fi
container_workdir=$(echo $container_workdir_str | sed "s|^~/\(.*\)|$HOME/\1|")
if [ ! -d "$container_workdir" ]; then
  abort "the \`$container_workdir_str\` is not a directory";
fi

container_options=$(config_get_optional '.container.options')
if [ -z "$container_options" ]; then container_options=''; fi

term=${TERM:-'linux'}
if [ -d "$HOME/.terminfo" ]; then
  terminfo=${TERMINFO:-"$HOME/.terminfo"}
else
  terminfo=${TERMINFO:-""}
fi

container_inputs="$base_image $container_name $(id -un) $HOME \
$(realpath $container_workdir) $container_options $term $terminfo"
container_checksum=$(compute_checksum "$container_inputs")
if [ -z "$(docker container ls -aq --filter name=$container_name)" ]; then
  docker container create \
      --tty --interactive --privileged --cap-add=SYS_PTRACE \
      --name=$container_name --hostname=$container_name --user=$(id -un) \
      --volume=$HOME:$HOME --workdir=$container_workdir $container_options \
      --env GANVIGAR_CONTAINER_CHECKSUM=$container_checksum \
      --env USER=$(id -un) --env USERNAME=$(id -un) --env LOGNAME=$(id -un) \
      --env TERM=$term --env TERMINFO=$terminfo \
      $base_image
elif [ "$(container_get_checksum $container_name)" != "$container_checksum" ]; then
  msg="the container \`$container_name\` already exists and has different "
  msg="$msg configuration"
  abort "$msg"
fi

docker container start $container_name
docker container exec -it $container_name bash
